import datetime

#Greedy 1/0 method knapsack problem

# n - number of items
# W - capacity of knapsack
# wt - weight,value

def greedy_knapsack(n, W, wt):

    ratios = [(index, item[1] / float(item[0])) for index, item in enumerate(weight_cost)]
    ratios = sorted(ratios, key=lambda x: x[1], reverse=True)
    combination = [0] * n
    cost = 0
    weight = 0
    for index, ratio in ratios:
        if weight_cost[index][0] + weight <= W:
            weight += wt[index][0]
            cost += wt[index][1]
            combination[index] = 1
    return cost, combination



capacity = 900
number = 1200

weight_cost = [(10,60), (10,100), (12,120),(12,120),(60,120),(10,60), (10,100), (12,120),(12,120),(60,120),(10,60), (10,100), (12,120),(12,120),(60,120),(10,60), (10,100), (12,120),(12,120),(60,120),(10,60), (10,100), (12,120),(12,120),(60,120),(10,60), (10,100), (12,120),(12,120),(60,120),(10,60), (10,100), (12,120),(12,120),(60,120),(10,60), (10,100), (12,120),(12,120),(60,120),(10,60), (10,100), (12,120),(12,120),(60,120),(10,60), (10,100), (12,120),(12,120),(60,120),(10,60), (10,100), (12,120),(12,120),(60,120),(10,60), (10,100), (12,120),(12,120),(60,120),(10,60), (10,100), (12,120),(12,120),(60,120),(10,60), (10,100), (12,120),(12,120),(60,120),(10,60), (10,100), (12,120),(12,120),(60,120),(10,60), (10,100), (12,120),(12,120),(60,120),(10,60), (10,100), (12,120),(12,120),(60,120),(10,60), (10,100), (12,120),(12,120),(60,120),(10,60), (10,100), (12,120),(12,120),(60,120),(10,60), (10,100), (12,120),(12,120),(60,120),(10,60), (10,100), (12,120),(12,120),(60,120),(10,60), (10,100), (12,120),(12,120),(60,120),(10,60), (10,100), (12,120),(12,120),(60,120),(10,60), (10,100), (12,120),(12,120),(60,120),(10,60), (10,100), (12,120),(12,120),(60,120),(10,60), (10,100), (12,120),(12,120),(60,120),(10,60), (10,100), (12,120),(12,120),(60,120),(10,60), (10,100), (12,120),(12,120),(60,120),(10,60), (10,100), (12,120),(12,120),(60,120),(10,60), (10,100), (12,120),(12,120),(60,120),(10,60), (10,100), (12,120),(12,120),(60,120),(10,60), (10,100), (12,120),(12,120),(60,120),(10,60), (10,100), (12,120),(12,120),(60,120),(10,60), (10,100), (12,120),(12,120),(60,120),(10,60), (10,100), (12,120),(12,120),(60,120),(10,60), (10,100), (12,120),(12,120),(60,120),(10,60), (10,100), (12,120),(12,120),(60,120),(10,60), (10,100), (12,120),(12,120),(60,120),(10,60), (10,100), (12,120),(12,120),(60,120),(10,60), (10,100), (12,120),(12,120),(60,120),(10,60), (10,100), (12,120),(12,120),(60,120),(10,60), (10,100), (12,120),(12,120),(60,120),(10,60), (10,100), (12,120),(12,120),(60,120),(10,60), (10,100), (12,120),(12,120),(60,120),(10,60), (10,100), (12,120),(12,120),(60,120),(10,60), (10,100), (12,120),(12,120),(60,120),(10,60), (10,100), (12,120),(12,120),(60,120),(10,60), (10,100), (12,120),(12,120),(60,120),(10,60), (10,100), (12,120),(12,120),(60,120),(10,60), (10,100), (12,120),(12,120),(60,120),(10,60), (10,100), (12,120),(12,120),(60,120),(10,60), (10,100), (12,120),(12,120),(60,120),(10,60), (10,100), (12,120),(12,120),(60,120),(10,60), (10,100), (12,120),(12,120),(60,120),(10,60), (10,100), (12,120),(12,120),(60,120),(10,60), (10,100), (12,120),(12,120),(60,120),(10,60), (10,100), (12,120),(12,120),(60,120),(10,60), (10,100), (12,120),(12,120),(60,120),(10,60), (10,100), (12,120),(12,120),(60,120),(10,60), (10,100), (12,120),(12,120),(60,120),(10,60), (10,100), (12,120),(12,120),(60,120),(10,60), (10,100), (12,120),(12,120),(60,120),(10,60), (10,100), (12,120),(12,120),(60,120),(10,60), (10,100), (12,120),(12,120),(60,120),(10,60), (10,100), (12,120),(12,120),(60,120),(10,60), (10,100), (12,120),(12,120),(60,120),(10,60), (10,100), (12,120),(12,120),(60,120),(10,60), (10,100), (12,120),(12,120),(60,120),(10,60), (10,100), (12,120),(12,120),(60,120),(10,60), (10,100), (12,120),(12,120),(60,120),(10,60), (10,100), (12,120),(12,120),(60,120),(10,60), (10,100), (12,120),(12,120),(60,120),(10,60), (10,100), (12,120),(12,120),(60,120),(10,60), (10,100), (12,120),(12,120),(60,120),(10,60), (10,100), (12,120),(12,120),(60,120),(10,60), (10,100), (12,120),(12,120),(60,120),(10,60), (10,100), (12,120),(12,120),(60,120),(10,60), (10,100), (12,120),(12,120),(60,120),(10,60), (10,100), (12,120),(12,120),(60,120),(10,60), (10,100), (12,120),(12,120),(60,120),(10,60), (10,100), (12,120),(12,120),(60,120),(10,60), (10,100), (12,120),(12,120),(60,120),(10,60), (10,100), (12,120),(12,120),(60,120),(10,60), (10,100), (12,120),(12,120),(60,120),(10,60), (10,100), (12,120),(12,120),(60,120),(10,60), (10,100), (12,120),(12,120),(60,120),(10,60), (10,100), (12,120),(12,120),(60,120),(10,60), (10,100), (12,120),(12,120),(60,120),(10,60), (10,100), (12,120),(12,120),(60,120),(10,60), (10,100), (12,120),(12,120),(60,120),(10,60), (10,100), (12,120),(12,120),(60,120),(10,60), (10,100), (12,120),(12,120),(60,120),(10,60), (10,100), (12,120),(12,120),(60,120),(10,60), (10,100), (12,120),(12,120),(60,120),(10,60), (10,100), (12,120),(12,120),(60,120),(10,60), (10,100), (12,120),(12,120),(60,120),(10,60), (10,100), (12,120),(12,120),(60,120),(10,60), (10,100), (12,120),(12,120),(60,120),(10,60), (10,100), (12,120),(12,120),(60,120),(10,60), (10,100), (12,120),(12,120),(60,120),(10,60), (10,100), (12,120),(12,120),(60,120),(10,60), (10,100), (12,120),(12,120),(60,120),(10,60), (10,100), (12,120),(12,120),(60,120),(10,60), (10,100), (12,120),(12,120),(60,120),(10,60), (10,100), (12,120),(12,120),(60,120),(10,60), (10,100), (12,120),(12,120),(60,120),(10,60), (10,100), (12,120),(12,120),(60,120),(10,60), (10,100), (12,120),(12,120),(60,120),(10,60), (10,100), (12,120),(12,120),(60,120),(10,60), (10,100), (12,120),(12,120),(60,120),(10,60), (10,100), (12,120),(12,120),(60,120),(10,60), (10,100), (12,120),(12,120),(60,120),(10,60), (10,100), (12,120),(12,120),(60,120),(10,60), (10,100), (12,120),(12,120),(60,120),(10,60), (10,100), (12,120),(12,120),(60,120),(10,60), (10,100), (12,120),(12,120),(60,120),(10,60), (10,100), (12,120),(12,120),(60,120),(10,60), (10,100), (12,120),(12,120),(60,120),(10,60), (10,100), (12,120),(12,120),(60,120),(10,60), (10,100), (12,120),(12,120),(60,120),(10,60), (10,100), (12,120),(12,120),(60,120),(10,60), (10,100), (12,120),(12,120),(60,120),(10,60), (10,100), (12,120),(12,120),(60,120),(10,60), (10,100), (12,120),(12,120),(60,120),(10,60), (10,100), (12,120),(12,120),(60,120),(10,60), (10,100), (12,120),(12,120),(60,120),(10,60), (10,100), (12,120),(12,120),(60,120),(10,60), (10,100), (12,120),(12,120),(60,120),(10,60), (10,100), (12,120),(12,120),(60,120),(10,60), (10,100), (12,120),(12,120),(60,120),(10,60), (10,100), (12,120),(12,120),(60,120),(10,60), (10,100), (12,120),(12,120),(60,120),(10,60), (10,100), (12,120),(12,120),(60,120),(10,60), (10,100), (12,120),(12,120),(60,120),(10,60), (10,100), (12,120),(12,120),(60,120),(10,60), (10,100), (12,120),(12,120),(60,120),(10,60), (10,100), (12,120),(12,120),(60,120),(10,60), (10,100), (12,120),(12,120),(60,120),(10,60), (10,100), (12,120),(12,120),(60,120),(10,60), (10,100), (12,120),(12,120),(60,120),(10,60), (10,100), (12,120),(12,120),(60,120),(10,60), (10,100), (12,120),(12,120),(60,120),(10,60), (10,100), (12,120),(12,120),(60,120),(10,60), (10,100), (12,120),(12,120),(60,120),(10,60), (10,100), (12,120),(12,120),(60,120),(10,60), (10,100), (12,120),(12,120),(60,120),(10,60), (10,100), (12,120),(12,120),(60,120),(10,60), (10,100), (12,120),(12,120),(60,120),(10,60), (10,100), (12,120),(12,120),(60,120),(10,60), (10,100), (12,120),(12,120),(60,120),(10,60), (10,100), (12,120),(12,120),(60,120),(10,60), (10,100), (12,120),(12,120),(60,120),(10,60), (10,100), (12,120),(12,120),(60,120),(10,60), (10,100), (12,120),(12,120),(60,120),(10,60), (10,100), (12,120),(12,120),(60,120),(10,60), (10,100), (12,120),(12,120),(60,120),(10,60), (10,100), (12,120),(12,120),(60,120),(10,60), (10,100), (12,120),(12,120),(60,120),(10,60), (10,100), (12,120),(12,120),(60,120),(10,60), (10,100), (12,120),(12,120),(60,120)]
a = datetime.datetime.now()
print(greedy_knapsack(number, capacity, weight_cost))

#  output (best cost, best combination list(contains 1 and 0))
b = datetime.datetime.now()
print(b-a)
